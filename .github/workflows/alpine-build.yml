name: Alpine Build

on:
  push:
    tags:
      - 'v*' # 当推送以 v 开头的标签时触发，例如 v1.0.0
  workflow_dispatch: # 允许手动触发工作流
    inputs:
      version:
        description: '版本号 (例如: v1.0.0)'
        required: true
        default: 'v0.0.0-manual'

jobs:
  build-alpine:
    name: Build with Alpine (musl)
    runs-on: ubuntu-latest
    container:
      image: golang:1.22-alpine
    steps:
      - name: Install build dependencies
        run: |
          apk add --no-cache git make zip tar bash upx

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整的 git 历史，用于生成版本号

      - name: Get version info
        id: get_version
        run: |
          # 如果是手动触发，使用输入的版本号，否则使用标签版本
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "COMMIT_ID=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "COMMIT_TIME=$(git log -1 --format=%aI)" >> $GITHUB_ENV
          echo "COMMIT_COUNT=$(git rev-list --count HEAD)" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date -Iseconds)" >> $GITHUB_ENV

      - name: Build for Linux (musl)
        env:
          CGO_ENABLED: 0
        run: |
          # 设置输出文件名
          OUTPUT_NAME=generator-${{ env.VERSION }}-linux-musl-amd64
          
          # 设置 ldflags 参数
          LDFLAGS="-s -w -X main.Version=${{ env.VERSION }} -X main.CommitID=${{ env.COMMIT_ID }} -X main.CommitTime=${{ env.COMMIT_TIME }} -X main.BuildTime=${{ env.BUILD_TIME }}"
          
          # 创建输出目录
          mkdir -p build/dist/bin
          
          # 编译
          go build -v -trimpath -ldflags="${LDFLAGS}" -o "build/dist/bin/${OUTPUT_NAME}" cmd/v1/*.go
          
          # 显示编译后的文件大小
          echo "编译后的文件大小:"
          ls -lh "build/dist/bin/${OUTPUT_NAME}"
          
          # 压缩二进制文件
          echo "使用 UPX 压缩二进制文件..."
          upx --best --lzma "build/dist/bin/${OUTPUT_NAME}"
          
          # 显示压缩后的文件大小
          echo "压缩后的文件大小:"
          ls -lh "build/dist/bin/${OUTPUT_NAME}"
          
          # 显示二进制文件信息
          echo "二进制文件信息:"
          file "build/dist/bin/${OUTPUT_NAME}" || true
          
          # 创建压缩包
          tar -czf "build/dist/bin/${OUTPUT_NAME}.tar.gz" -C build/dist/bin "${OUTPUT_NAME}"
          echo "ASSET=build/dist/bin/${OUTPUT_NAME}.tar.gz" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: generator-linux-musl-amd64
          path: ${{ env.ASSET }}
          if-no-files-found: error

name: Release

on:
  push:
    tags:
      - 'v*' # Triggered when pushing a tag starting with v, e.g., v1.0.0
  workflow_dispatch: # Allow manual workflow triggering
    inputs:
      version:
        description: 'Version (e.g.: v1.0.0)'
        required: true
        default: 'v0.0.0-manual'

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 定义要构建的目标平台
        include:
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""
          - goos: windows
            goarch: amd64
            suffix: ".exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整的 git 历史，用于生成版本号

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # 使用最新的稳定版 Go

      - name: Get version info
        id: get_version
        run: |
          # If manually triggered, use the input version, otherwise use the tag version
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "COMMIT_ID=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "COMMIT_TIME=$(git log -1 --format=%aI)" >> $GITHUB_ENV
          echo "COMMIT_COUNT=$(git rev-list --count HEAD)" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date -Iseconds)" >> $GITHUB_ENV

          # Find previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            # If no previous tag found, get all commits
            echo "No previous tag found, getting all commit records"
            COMMIT_COUNT=$(git rev-list --count HEAD)

            if [ "$COMMIT_COUNT" -gt 20 ]; then
              # If more than 20 commits, only get the latest 20
              echo "Commit count ($COMMIT_COUNT) exceeds 20, getting only the latest 20"
              COMMIT_LOGS=$(git log -20 --pretty=format:"- %h %s (%an, %ad)" --date=short)
            else
              # Otherwise get all commits
              echo "Commit count ($COMMIT_COUNT) does not exceed 20, getting all commits"
              COMMIT_LOGS=$(git log --pretty=format:"- %h %s (%an, %ad)" --date=short)
            fi
          else
            # If previous tag found, get all commits since that tag
            echo "Previous tag found: $PREV_TAG"
            COMMIT_COUNT=$(git rev-list --count $PREV_TAG..HEAD)

            if [ "$COMMIT_COUNT" -gt 20 ]; then
              # If more than 20 commits since the previous tag, only get the latest 20
              echo "Commit count since previous tag ($COMMIT_COUNT) exceeds 20, getting only the latest 20"
              COMMIT_LOGS=$(git log -20 --pretty=format:"- %h %s (%an, %ad)" --date=short)
            else
              # Otherwise get all commits since the previous tag
              echo "Commit count since previous tag ($COMMIT_COUNT) does not exceed 20, getting all commits"
              COMMIT_LOGS=$(git log $PREV_TAG..HEAD --pretty=format:"- %h %s (%an, %ad)" --date=short)
            fi
          fi

          echo "COMMIT_LOGS<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_LOGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0  # Disable CGO to generate fully static binaries, not dependent on glibc
        run: |
          # Set output filename
          OUTPUT_NAME=generator-${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}

          # Set ldflags parameters
          # -s -w reduce binary file size (remove symbol table and debug info)
          # -extldflags "-static" force static linking
          LDFLAGS="-s -w -extldflags '-static' -X main.Version=${{ env.VERSION }} -X main.CommitID=${{ env.COMMIT_ID }} -X main.CommitTime=${{ env.COMMIT_TIME }} -X main.BuildTime=${{ env.BUILD_TIME }}"

          # Create output directory
          mkdir -p build/dist/bin

          # Compile
          go build -v -trimpath -ldflags="${LDFLAGS}" -o "build/dist/bin/${OUTPUT_NAME}" cmd/v1/*.go

          # Display file size after compilation
          echo "File size after compilation:"
          ls -lh "build/dist/bin/${OUTPUT_NAME}"

          # Install UPX compression tool
          if [[ "${{ matrix.goos }}" == "linux" || "${{ matrix.goos }}" == "windows" ]]; then
            sudo apt-get update && sudo apt-get install -y upx

            # Compress binary file
            echo "Compressing binary file with UPX..."
            upx --best --lzma "build/dist/bin/${OUTPUT_NAME}"

            # Display file size after compression
            echo "File size after compression:"
            ls -lh "build/dist/bin/${OUTPUT_NAME}"
          fi

          # Display binary file information (Linux only)
          if [[ "${{ matrix.goos }}" == "linux" ]]; then
            echo "Binary file information:"
            file "build/dist/bin/${OUTPUT_NAME}" || true
            ldd "build/dist/bin/${OUTPUT_NAME}" || true
          fi

          # Create archive
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            zip -j "build/dist/bin/${OUTPUT_NAME}.zip" "build/dist/bin/${OUTPUT_NAME}"
            echo "ASSET=build/dist/bin/${OUTPUT_NAME}.zip" >> $GITHUB_ENV
          else
            tar -czf "build/dist/bin/${OUTPUT_NAME}.tar.gz" -C build/dist/bin "${OUTPUT_NAME}"
            echo "ASSET=build/dist/bin/${OUTPUT_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generator-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ env.ASSET }}
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整的 git 历史

      - name: Get version info
        id: get_version
        run: |
          # If manually triggered, use the input version, otherwise use the tag version
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

          # Find previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            # If no previous tag found, get all commits
            echo "No previous tag found, getting all commit records"
            COMMIT_COUNT=$(git rev-list --count HEAD)

            if [ "$COMMIT_COUNT" -gt 20 ]; then
              # If more than 20 commits, only get the latest 20
              echo "Commit count ($COMMIT_COUNT) exceeds 20, getting only the latest 20"
              COMMIT_LOGS=$(git log -20 --pretty=format:"- %h %s (%an, %ad)" --date=short)
            else
              # Otherwise get all commits
              echo "Commit count ($COMMIT_COUNT) does not exceed 20, getting all commits"
              COMMIT_LOGS=$(git log --pretty=format:"- %h %s (%an, %ad)" --date=short)
            fi
          else
            # If previous tag found, get all commits since that tag
            echo "Previous tag found: $PREV_TAG"
            COMMIT_COUNT=$(git rev-list --count $PREV_TAG..HEAD)

            if [ "$COMMIT_COUNT" -gt 20 ]; then
              # If more than 20 commits since the previous tag, only get the latest 20
              echo "Commit count since previous tag ($COMMIT_COUNT) exceeds 20, getting only the latest 20"
              COMMIT_LOGS=$(git log -20 --pretty=format:"- %h %s (%an, %ad)" --date=short)
            else
              # Otherwise get all commits since the previous tag
              echo "Commit count since previous tag ($COMMIT_COUNT) does not exceed 20, getting all commits"
              COMMIT_LOGS=$(git log $PREV_TAG..HEAD --pretty=format:"- %h %s (%an, %ad)" --date=short)
            fi
          fi

          echo "COMMIT_LOGS<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_LOGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Set commit count environment variable for display in Release description
          echo "COMMIT_COUNT=$COMMIT_COUNT" >> $GITHUB_ENV
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Generator ${{ env.VERSION }}
          tag_name: ${{ github.event_name == 'workflow_dispatch' && env.VERSION || github.ref_name }}
          draft: false
          prerelease: false
          files: artifacts/**/*
          body: |
            # Generator ${{ env.VERSION }}

            ## Binary Files

            All binary files are statically compiled and do not depend on external libraries.

            ## Commit History

            ${{ env.PREV_TAG != '' && format('Commits since version {0} (Total: {1}):', env.PREV_TAG, env.COMMIT_COUNT) || format('Commit history (Total: {0}):', env.COMMIT_COUNT) }}

            ${{ env.COMMIT_LOGS }}

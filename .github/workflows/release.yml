name: Release

on:
  push:
    tags:
      - 'v*' # 当推送以 v 开头的标签时触发，例如 v1.0.0
  workflow_dispatch: # 允许手动触发工作流
    inputs:
      version:
        description: '版本号 (例如: v1.0.0)'
        required: true
        default: 'v0.0.0-manual'

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 定义要构建的目标平台
        include:
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""
          - goos: windows
            goarch: amd64
            suffix: ".exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整的 git 历史，用于生成版本号

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # 使用最新的稳定版 Go

      - name: Get version info
        id: get_version
        run: |
          # 如果是手动触发，使用输入的版本号，否则使用标签版本
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "COMMIT_ID=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "COMMIT_TIME=$(git log -1 --format=%aI)" >> $GITHUB_ENV
          echo "COMMIT_COUNT=$(git rev-list --count HEAD)" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date -Iseconds)" >> $GITHUB_ENV
          
          # 查找上一个标签
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # 如果没有找到上一个标签，获取所有提交
            echo "没有找到上一个标签，获取所有提交记录"
            COMMIT_COUNT=$(git rev-list --count HEAD)
            
            if [ "$COMMIT_COUNT" -gt 20 ]; then
              # 如果提交数量超过20条，只获取最近20条
              echo "提交数量($COMMIT_COUNT)超过20条，只获取最近20条"
              COMMIT_LOGS=$(git log -20 --pretty=format:"- %h %s (%an, %ad)" --date=short)
            else
              # 否则获取所有提交
              echo "提交数量($COMMIT_COUNT)不超过20条，获取所有提交"
              COMMIT_LOGS=$(git log --pretty=format:"- %h %s (%an, %ad)" --date=short)
            fi
          else
            # 如果找到了上一个标签，获取自上一个标签以来的所有提交
            echo "找到上一个标签: $PREV_TAG"
            COMMIT_COUNT=$(git rev-list --count $PREV_TAG..HEAD)
            
            if [ "$COMMIT_COUNT" -gt 20 ]; then
              # 如果提交数量超过20条，只获取最近20条
              echo "自上一个标签以来的提交数量($COMMIT_COUNT)超过20条，只获取最近20条"
              COMMIT_LOGS=$(git log -20 --pretty=format:"- %h %s (%an, %ad)" --date=short)
            else
              # 否则获取自上一个标签以来的所有提交
              echo "自上一个标签以来的提交数量($COMMIT_COUNT)不超过20条，获取所有提交"
              COMMIT_LOGS=$(git log $PREV_TAG..HEAD --pretty=format:"- %h %s (%an, %ad)" --date=short)
            fi
          fi
          
          echo "COMMIT_LOGS<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_LOGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0  # 禁用CGO以生成完全静态的二进制文件，不依赖glibc
        run: |
          # 设置输出文件名
          OUTPUT_NAME=generator-${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
          
          # 设置 ldflags 参数
          # -s -w 减小二进制文件大小（删除符号表和调试信息）
          # -extldflags "-static" 强制使用静态链接
          LDFLAGS="-s -w -extldflags '-static' -X main.Version=${{ env.VERSION }} -X main.CommitID=${{ env.COMMIT_ID }} -X main.CommitTime=${{ env.COMMIT_TIME }} -X main.BuildTime=${{ env.BUILD_TIME }}"
          
          # 创建输出目录
          mkdir -p build/dist/bin
          
          # 编译
          go build -v -trimpath -ldflags="${LDFLAGS}" -o "build/dist/bin/${OUTPUT_NAME}" cmd/v1/*.go
          
          # 显示编译前的文件大小
          echo "编译后的文件大小:"
          ls -lh "build/dist/bin/${OUTPUT_NAME}"
          
          # 安装 UPX 压缩工具
          if [[ "${{ matrix.goos }}" == "linux" || "${{ matrix.goos }}" == "windows" ]]; then
            sudo apt-get update && sudo apt-get install -y upx
            
            # 压缩二进制文件
            echo "使用 UPX 压缩二进制文件..."
            upx --best --lzma "build/dist/bin/${OUTPUT_NAME}"
            
            # 显示压缩后的文件大小
            echo "压缩后的文件大小:"
            ls -lh "build/dist/bin/${OUTPUT_NAME}"
          fi
          
          # 显示二进制文件信息（仅适用于Linux）
          if [[ "${{ matrix.goos }}" == "linux" ]]; then
            echo "二进制文件信息:"
            file "build/dist/bin/${OUTPUT_NAME}" || true
            ldd "build/dist/bin/${OUTPUT_NAME}" || true
          fi
          
          # 创建压缩包
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            zip -j "build/dist/bin/${OUTPUT_NAME}.zip" "build/dist/bin/${OUTPUT_NAME}"
            echo "ASSET=build/dist/bin/${OUTPUT_NAME}.zip" >> $GITHUB_ENV
          else
            tar -czf "build/dist/bin/${OUTPUT_NAME}.tar.gz" -C build/dist/bin "${OUTPUT_NAME}"
            echo "ASSET=build/dist/bin/${OUTPUT_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generator-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ env.ASSET }}
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整的 git 历史

      - name: Get version info
        id: get_version
        run: |
          # 如果是手动触发，使用输入的版本号，否则使用标签版本
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          
          # 查找上一个标签
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # 如果没有找到上一个标签，获取所有提交
            echo "没有找到上一个标签，获取所有提交记录"
            COMMIT_COUNT=$(git rev-list --count HEAD)
            
            if [ "$COMMIT_COUNT" -gt 20 ]; then
              # 如果提交数量超过20条，只获取最近20条
              echo "提交数量($COMMIT_COUNT)超过20条，只获取最近20条"
              COMMIT_LOGS=$(git log -20 --pretty=format:"- %h %s (%an, %ad)" --date=short)
            else
              # 否则获取所有提交
              echo "提交数量($COMMIT_COUNT)不超过20条，获取所有提交"
              COMMIT_LOGS=$(git log --pretty=format:"- %h %s (%an, %ad)" --date=short)
            fi
          else
            # 如果找到了上一个标签，获取自上一个标签以来的所有提交
            echo "找到上一个标签: $PREV_TAG"
            COMMIT_COUNT=$(git rev-list --count $PREV_TAG..HEAD)
            
            if [ "$COMMIT_COUNT" -gt 20 ]; then
              # 如果提交数量超过20条，只获取最近20条
              echo "自上一个标签以来的提交数量($COMMIT_COUNT)超过20条，只获取最近20条"
              COMMIT_LOGS=$(git log -20 --pretty=format:"- %h %s (%an, %ad)" --date=short)
            else
              # 否则获取自上一个标签以来的所有提交
              echo "自上一个标签以来的提交数量($COMMIT_COUNT)不超过20条，获取所有提交"
              COMMIT_LOGS=$(git log $PREV_TAG..HEAD --pretty=format:"- %h %s (%an, %ad)" --date=short)
            fi
          fi
          
          echo "COMMIT_LOGS<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_LOGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # 设置提交数量环境变量，用于显示在 Release 描述中
          echo "COMMIT_COUNT=$COMMIT_COUNT" >> $GITHUB_ENV
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Generator ${{ env.VERSION }}
          tag_name: ${{ github.event_name == 'workflow_dispatch' && env.VERSION || github.ref_name }}
          draft: false
          prerelease: false
          files: artifacts/**/*
          body: |
            # Generator ${{ env.VERSION }}
            
            发布时间: ${{ env.BUILD_TIME }}
            
            ## 二进制文件
            
            - Linux (amd64, arm64)
            - macOS (amd64, arm64)
            - Windows (amd64)
            - Alpine Linux (musl, amd64)
            
            所有二进制文件都是静态编译的，不依赖外部库。
            
            ## 提交记录
            
            ${{ env.PREV_TAG != '' && format('自上一个版本 {0} 以来的提交记录 (共 {1} 条):', env.PREV_TAG, env.COMMIT_COUNT) || format('提交记录 (共 {0} 条):', env.COMMIT_COUNT) }}
            
            ${{ env.COMMIT_LOGS }}
